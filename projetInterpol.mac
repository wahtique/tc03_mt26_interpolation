/*
Fichier rassemblant toutes les fonctions de notre projet afin d'eviter de multiplier les imports
Auteurs : Robin Trioux (robin.trioux@utbm.fr), William Veal Phan (william.veal@utbm.fr)
Date de création : 10/12/2016
*/




/* ------------ HELP ----------------*/



helpInterpol():=block
(
	print("Fonctions incluses dans le projet : "),
	print("reglist(a,b,n) : construit une liste reguliere de n+1 points entre a et b"),
	print("tchebylist(a,b,n) : genere une distribution de Tchebychev de n+1 points entre a et b"),
	print("Pour les fonction dinterpolation, il faut utiliser la fonction define afin de recuperer une fonction et non une expression. Par exemple :"),
	print("define(f(x),lagrange(xi,yi))$"),
	print("Dans la suite, on considerera des distribution de points modelises par une list d'abscisses Lx et une liste d'ordonnees Ly."),
	print("lagrange(Lx,Ly) : calcule le polynome d interpolation Lagrangien correspondant a la serie de points fournie en input"),
	print("pedagolagrange(Lx,Ly) : version imagee de Lagrange"),
	print("hermite(Lx,Ly) : interpolation de  Hermite de la serie de points fournie en entree"),
	print("moindrescarres(Lx,Ly,d) : interpolle une serie de points par un polynome de degre au plus d et  minimisant l'erreur quadratique"),
	print("interpfourier(Lx,Ly) : interpolation par un polynome trigonometrique"),
	print("errquadcontinue(u,v,a,b) : donne l'erreur dans la norme L²(a,b) entre 2 fonctions u et v"),
	print("errquaddiscrete(u,v,Lx) : donne la somme du carre des erreurs entre u et v pour les abscisses Lx. En pratique, on preferera utiliser celle-ci :","on ne connait en general pas la fonction derriere la distribution de points, et errQuadContinue peut generer des erreurs a cause de la methode de calcul d intergrales qu'il utilise. "),
	print("nb: Aucun controle d entree n a ete implemente"),
	
	print("ATTENTION:"," Pour pouvoir utiliser les fonctions du projet comme un objet de type FONCTION dans (wx)maxima,il est necessaire d utiliser un define ou ''(...),","sans lequel la fonction d'interpolation retournera uniquement un objet de type EXPRESSION.","Par exemple pour Lagrange il est nessaire de declarer une fonction (Par exemple L) de la facon suivante:"),
	print(" _________________________________________________________________________ "),
	print("|                                                                         |"),
	print("|     define(L(x),lagrange(xi,yi))$  ou L(x):=''(lagrange(xi,yi))$        |"),
        print("|_________________________________________________________________________|"),
	print("","Il vous sera alors possible de calculer Pour tout x, L(x)"),
	""
)$

/*ATTENTION: Pour pouvoir être utilisée comme une fonction dans maxima,
	     il est nécessaire d'utiliser un define.
	     Par exemple pour Lagrange il est nécessaire de déclarer une fonction de la façon suivante:

	 _____________________________________________
	|                                             |
	|	define(f(x),lagrange(xi,yi))$         |
	|_____________________________________________|		

*/




/* ---------------------- DISTRIBUTIONS----------------------------*/


/*
Fonctions generant des distributions d abscisses.
On peut ensuite, par exemple, appliquer une fonction mathematique a une de ces listes d abscisses pour generer une liste d' ordonnees.
*/

/* 
Distribution régulière de a a b. Construit n+1 points x0 ... xn
Arguments :
a : borne  inferieure de la liste
b : borne sup
n : nombre de points -1 ( oui on peut faire plus clair )
Resultat :
l : une liste de reels, de a a b, de n+1 elements uniformement espaces
*/
reglist(a,b,n):=block 
(
	[l],/*Permet à la liste de rester locale*/
	l:[],	
	for i:0 thru n step 1 do
	(
		l:endcons(a+i*(b-a)/n,l)
	),
	l
)$

/* 
Distribution Tchebychev de a a b de n+1 abscisses
Arguements :
a : borne inferieure de la distribution
b : borne sup
n : nombre de points -1
Resultat :
l : une liste de n+1 reels entre a et b. Les points sont plus espaces au milieu et plus proche sur les cotes.
*/
tchebylist(a,b,n):=block
(
	[l],/*Permet à la liste de rester locale*/
	l:[],
	for i:0 thru n step 1 do
	(
		l:endcons((a+b)/2-(b-a)/2*cos((i+1/2)*%pi/(n+1)),l)
	),
	l
)$



/* ------------- LAGRANGE -------------------------------- */


/*
Construit un polynome d interpolation construit par la methode de Lagrange
Arguments :
xi : liste des absisses
yi : liste des ordonnes
Resultat :
F_L(x) : un polynome
*/

lagrange(xi,yi):=block 
(
	kill(x),
	[n],
	[L],
	[Li],
	n:length(xi)-1,
	L:0,
	for i:1 thru n+1 step 1 do 
	(
		Li:1,
		for j:1 thru n+1 step 1 do
		(
			if(is(notequal(i,j))) /* ~ not(i=j)*/
			then (Li:Li*(x-xi[j])/(xi[i]-xi[j]))
		),
		L:yi[i]*Li+L
	),	
	L
)$

/*
Construit un polynome d interpolation construit par la methode de Lagrange.
Affiche en plus des etapes intermediaires.
Arguments :
xi : liste des absisses
yi : liste des ordonnes
Resultat :
F_L(x) : un polynome
*/
pedagolagrange(xi,yi):=block
(
	kill(x),
	[n],
	[L],
	[Li],
	n:length(xi)-1,
	L:0,
	Li:[],
	for i:1 thru n+1 step 1 do 
	(
		Li:endcons(1,Li),
		for j:1 thru n+1 step 1 do
		(
			if(is(notequal(i,j))) /* ~ not(i=j)*/
			then (Li[i]:Li[i]*(x-xi[j])/(xi[i]-xi[j]))
		),
		L:yi[i]*Li[i]+L,
		print('"L"[i],"= ",Li[i])
	),
	print("Polynome de Lagrange ",L),
	define(F_L(x),L),
	FListTemp:makelist(yi[i]*Li[i],i,1,n+1),
	FList:append([[discrete,xi,yi]],[L],FListTemp),
	DiscreteStyle:[style,[points,2,1,1]],
	FonctionStyle:makelist([lines,2,i],i,2,n+3),
	StyleList:append(DiscreteStyle,FonctionStyle),
	LegendList:append([legend,"Donnees d'interpolation","L(x)"],makelist(string(sconcat("y",i,".L",i,"(x)")),i,1,n+1)),
	xmin:apply(min,xi),
	xmax:apply(max,xi),
	ymin:apply(min,yi),
	ymax:apply(max,yi),
	/*On élargi un peu les bornes pour l'affichage*/
	k: 0.2*(xmax-xmin),
	xmax:xmax+k/2,
	xmin:xmin-k/2,
	k: 0.2*(ymax-ymin),
	ymax:ymax+k/2,
	ymin:ymin-k/2,
		
	plot2d(FList,[x,xmin,xmax],[y,ymin,ymax],StyleList,LegendList),
	kill(FListTemp,FList,DiscreteStyle,FonctionStyle,StyleList,LegendList),
	L
);




/* ----------------------- HERMITE ---------------------- */

/*
Construit un polynome d interpolation construit par la methode de Hermite ( un frenchy, ouais !)
Arguments :
xi : liste des absisses
yi : liste des ordonnes
Resultat :
F_H(x) : un polynome. Possiblement casse sur les cotes. Possiblement un bug de notre fonction, ou aussi possiblement de Maxima ( non cest pas Maple, mais au moins cest gratuit )
*/
hermite(xi,yi):=block
(

	kill(x),
	n:length(xi),
	H:0,
	for i:1 thru n step 1 do 
	(
		Li:1,
		for j:1 thru n step 1 do
		(
			if(is(notequal(i,j)))
			then (Li:Li*((x-xi[j])/(xi[i]-xi[j])))
		),
		qi:Li^2,
		define(F_qi(x),qi),/*Ce bloc sert uniquement à rendre plus lisible l'expression de H 11 lignes plus bas*/
		define(F_Li(x),Li),
		define(F_dLi(x),diff(Li,x)),
		Hi:qi*(1-2*F_dLi(xi[i])*(x-xi[i])),/*Se retrouve en dérivant H par rapport à x et en utilisant la propriété d'unicité des coefficients sur les polynomes*/
		Ki:qi*(x-xi[i]),

		if((i<(n)) and i#1 ) /*On ne peut pas dériver sur les extremités */
		then
		(
			/*DeltaY est le taux de variation de y soit une approximation de f'(xi) ici nous faisons la moyenne des deux variations à droite et à gauche d'un point*/
			DeltaY:((yi[i+1]-yi[i])/(xi[i+1]-xi[i])+(yi[i]-yi[i-1])/(xi[i]-xi[i-1]))/2 /*Approximation de la dérivée par le taux d'accroissement des points adjacents*/
		),



		if(i=0 and n>1) /*On force le calcul de dérivé sur les bords*/
		then
		(
			DeltaY:((yi[2]-yi[1])/(xi[2]-xi[1]))
		),

		if(i=n)
		then
		(
			DeltaY:(yi[n]-yi[n-1])/(xi[n]-xi[n-1])
		),
	
		H:H+(yi[i]*Hi+DeltaY*Ki) /*Si pour une raison ou une autre nous connaissons f'(xi), il serait alors préférable de remplacer DeltaY par cette grandeur*/
		
		
	),
	kill(F_qi,F_Li,F_dLi,qi,Li,Ki),
	H
)$



/* ----------------------- MOINDRES CARRES ---------------- */


/*
Fonction generant un polynome d'interpolation suivant la methode des moindres carres
Arguments :
Lx : une liste d'abscisses
Ly : la liste des ordonnees correspondantes
p : le degre souhaite du polynome d'interpolation, p < n
Resultat :
P(x) : le polynome d'interpolation
*/

moindrescarres(Lx,Ly,d):=block
(
	kill(x,Px), /* si x est asttribué a une autre valeur la fonction bug. Faute d'avoir une meilleur solution, on kill x a chaque fois */
	n : length(Lx),
	Xm:zeromatrix(n,d+1),
	for k:1 thru n do
	(
		for j:1 thru d+1 do
		(
			if (j=1) then Xm[k][j]:1 else Xm[k][j]:Lx[k]**(j-1)
		)
	),

	Ym:zeromatrix(n,1),
	for k:1 thru n do
	(
		Ym[k][1]:Ly[k]
	),

	B:bfloat(invert(transpose(Xm).Xm).transpose(Xm).Ym),
	
	Px:0,
	for k:0 thru d do
	(
		Px : Px + B[k+1][1] * x**k
	),

	define(Pmc(x),Px),
	Pmc(x)
)$



/* -----------------------------TRIGONOMETRIQUE -----------------------*/



/*
Fonction donnant une approximation d une serie de points par un polynome trigonometrique
Arguments:
Lx : liste des abscisses
Ly : liste des ordonnees, de mm taille que Lx
Resultat :
f(x) : le polyn6ome trigonométrique ajustant la serie de points. 
*/
interpfourier(Lx,Ly):=block
(
	kill(x,Px),
	n:length(Lx), /*pas de verification des erreurs pour linstant*/
	T:Lx[n]-Lx[1],
	w:2*%pi/T,

	/* on approxime les coefficients en approximant l integrale de la fonction */

	Px:bfloat((1/T)*sum((Ly[k]+Ly[k+1])*(Lx[k+1]-Lx[k])/2,k,1,n-1)), /* premier terme a0 */

	/*on ajoute mnt les termes de degre intermediaire*/
	for j:1 thru floor(n/2) do
	(
		aj:bfloat((1/T)*sum((Ly[k]+Ly[k+1])*(Lx[k+1]-Lx[k])*cos(w*j*Lx[k]),k,1,n-1)),
		bj:bfloat((1/T)*sum((Ly[k]+Ly[k+1])*(Lx[k+1]-Lx[k])*sin(w*j*Lx[k]),k,1,n-1)),
		Px:Px+aj*cos(w*j*x)+bj*sin(w*j*x)
	),
	define(f(x),Px),
	f(x)
)$


/* ----------------- ERREUR QUADRATIQUE -------------------------*/



/*
Fonction donnant l erreur dans la norme L²(a,b). Inutile dans la plupart des cas pratiques. Cassee dans les autres. Et Maxima fait de droles de choses avec le calcul d integrales...Probleme reccurent : "rat" qui simplifie des valeurs en continue jusqu a crasher. Ou remplir toute la memoire allouee aux objets LISP ( possiblement lie a mon OS, ie. W10). Ne pas trop s y fier, meme si il semble calculer des valeurs pas trop mauvaises. 
Arguments :
u : premiere fonction
v : deuxieme fonction
a,b : les bornes de l'intégration, a < b
Resultat :
err : un réel, l'erreur quadratique entre f et g
*/
errquadqontinue(u,v,a,b):=block
(
	kill(x),
	integrate((u(x)-v(x))**2,x,a,b)
);



/*
Fonction donnant la forme discrète de l'erreur quadratique. Preferons celle la a la precedente. Attention peut renvoyer des resulats absurdes suivantla distribution de points fournie en entree. 
Un bon exemple serait son utilisation sur une interpolation de Lagrange : fournir la meme liste en entree pour calculer l erreur va renvoyer 0 vu que le polynome Lagrangien passe par TOUS ces points. Mais le polynome nest surement pas egal a la fonctions sous-jacente. 
Arguments :
u : premiere fonction
v : deuxieme fonction
Lx : la liste dea abscisses pour la comparaison
Resultat :
err : un reel, somme des erreurs quadratiques entre u(xi) et v(xi), avec les xi etant les elements de la liste Lx
*/
errquaddiscrete(u,v,Lx):=block
(
	kill(x),
	err : 0,
	for k : 1 thru length(Lx) do
	(
		x : Lx[k],
		err : err + bfloat((u(Lx[k])-v(Lx[k]))**2)
	),
	kill(x),
	err
)$

