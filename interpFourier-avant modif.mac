/*
Fonction d'interpolation trigonometrique
Auteur : William Veal Phan
Date de creation : 30/11/2016
*/

/*
Fonction donnant une approximation d une serie de points par un polynome trigonometrique de degre au plus d
Arguments:
Lx : liste des abscisses
Ly : liste des ordonnees, de mm taille que Lx
d : degre de du polynome de sortie souhaite
Resultat :
f(x) : la serie de Fourier ajustant la serie de points. 
*/
interpFourier(Lx,Ly):=block
(
	kill(x,u),
	n:length(Lx), /*pas de verification des erreurs pour linstant*/
	m:0,

	if mod(n,2)=0 then m:n/2 else m:(n+1)/2,

	/* on "compresse" la fonction sur lintervalle 0,2pi*/
	L1:(2*%pi)/(Lx[n]-Lx[1])*(Lx-Lx[1]),

	/* on approxime les coefficients en approximant l integrale de la fonction */

	P:bfloat((1/(2*%pi))*sum((Ly[k]+Ly[k+1])*(L1[k+1]-L1[k]),k,1,n-1))/2, /* premier terme a0 / 2*/
	P:P+bfloat((1/(2*%pi))*sum((Ly[k]+Ly[k+1])*(L1[k+1]-L1[k])*cos(m*L1[k]),k,1,n-1))*cos(m*u)/2, /*ajout du dernier terme ad*cos(d*x) */ 

	/*on ajoute mnt les termes de degre intermediaire*/
	for j:1 thru m do
	(
		aj:bfloat((1/(2*%pi))*sum((Ly[k]+Ly[k+1])*(L1[k+1]-L1[k])*cos(j*L1[k]),k,1,n-1)),
		bj:bfloat((1/(2*%pi))*sum((Ly[k]+Ly[k+1])*(L1[k+1]-L1[k])*sin(j*L1[k]),k,1,n-1)),
		P:P+aj*cos(j*u)+bj*sin(j*u)
	),
	define(g(u),P),


	/* on remet la fonction sur son intevalle de base */
	define(f(x),g(x*(Lx[n]-Lx[1])/(2*%pi) + Lx[1])),
	f(x)
);


/*


/*  APARTIR DE LA CEST LES ESSAIS FOIREUX*/
/*
Fonction donnant le polynome de Fourier correspondant a la serie de point fournie, recuperee sur un site louche
Arguments :
Lx : liste des abscisses
Ly : liste ds ordonnees
a : borne inferieure d'interpolation
b : borne superieure
n : nombre de points
Resultat :
Px : le polynome trigonometrique correspondant
*/
interpFourier1(Lx,Ly):=block
(
	kill(x),
	n:length(Lx),
	if mod(n,2)=0 then m:n/2 else m:(n-1)/2,

	Px:0,
	for j:0 thru m do
	(
		ajsum:0,
		bjsum:0,
		for k:1 thru n do
		(
			ajsum : ajsum + Ly[k]*cos(j*k),
			bjsum : bjsum + Ly[k]*sin(j*Lx[k])
		),
		if j=0 then ajsum : ajsum/2,
		if (j=m and mod(n,2) = 0) then ajsum : ajsum/2,
		Px : Px + ajsum*((2/n)*cos(j*x)) + bjsum*((2/n)*sin(j*x))
	),
define(f_F(x),Px),
f_F(x)
);

/*
Fonction donnant le polynome trigonometrique correspondant a la serie de points fournies. Elle utilise le package fft fourni avec maxima Les points doivent etre uniformement espaces.
Arguments:

*/
interpFourier2(L):=block
(
	kill(x),
	n:length(L),
	range:L[n]-L[1],

	/* On a besoin d une liste ayant une longueur egale a une puissance de 2. Nous allons donc peut etre devoir faire du zero-padding */

	p:0,
	for i:0 while 2**i < n do p:i,
	/* de part la struture etrange du while...et en considerant le cas absurde ou on va inteproler un seul point*/
	if p > 0 then p : p+1,
	if n < 2**p then 
		for i:0 while n < 2**p do 
		(
			L:endcons(0+0*%i,L),
			n:length(L)
		),

	/* a ce moment la nous avons donc une liste de taille 2**p . On utilise mnt l exemple fourni avec le package fft */

	L1:make_array(any,n),
	fillarray(L1,L),
	L2:fft(L1),
	a : make_array (any, n/2 + 1),
	b : make_array (any, n/2 + 1),
	a[0] : realpart (L2[0]),
	b[0] : 0,
	for k : 1 thru n/2 - 1 do
	(
		a[k] : realpart (L2[k] + L2[n - k]),
    	b[k] : imagpart (L2[n - k] - L2[k])
    ),

    a[n/2] : realpart(L2[n/2]),
    b[n/2] : 0,
    Px:sum(a[k]*cos(x*k*range/n) + b[k]*sin(x*k*range/n), k, 0, n/2),
    define(f_P(x),Px),
    f_P(x)
);

*/