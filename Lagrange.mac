
/* xi et yi sont deux listes de même dimension=n*/
/*CreatePoints génère une liste de dimension n telle que:*/
/* xi:[x1,x2,...xn]  yi:[y1,y2,...yn]*/ 
/*CreatePoints(xi,yi)= [[x1,y1],[x2,y2]...[xn,yn]]*/

CreatePoints(xi,yi):=block
(
	Atome:[0,0],
	xy:[],
	for i:1 thru length(xi) step 1 do
	(
	
		xy:endcons(0,xy),
		xy[i]:[xi[i],yi[i]]
	),
	xy
);

Lagrange(xi,yi):=block
(
	kill(x),
	n:length(xi)-1,
	L:0,
	for i:1 thru n+1 step 1 do 
	(
		Li:1,
		for j:1 thru n+1 step 1 do
		(
			if(is(notequal(i,j))) /* ~ not(i=j)*/
			then (Li:Li*(x-xi[j])/(xi[i]-xi[j]))
		),
		L:yi[i]*Li+L
	),	
	define(F_L(x),L),
	F_L(x)
);


PedagoLagrange(xi,yi):=block
(
	kill(x),
	n:length(xi)-1,
	L:0,
	Li:[],
	for i:1 thru n+1 step 1 do 
	(
		Li:endcons(1,Li),
		for j:1 thru n+1 step 1 do
		(
			if(is(notequal(i,j))) /* ~ not(i=j)*/
			then (Li[i]:Li[i]*(x-xi[j])/(xi[i]-xi[j]))
		),
		L:yi[i]*Li[i]+L,
		print('"L"[i],"= ",Li[i])
	),
	print("Polynome de Lagrange ",L),
	define(F_L(x),L),
	/*plot2d(cons(L,Li),[x,apply(min,xi),apply(max,xi)],[y,apply(min,yi),apply(max,yi)]),
	*/
	/*plot2d([[discrete,CreatePoints(xi,yi)],makelist(Li[i],i,1,n)],[x,0,10],[style, points,lines],[point_type, asterisk]),*/
	FListTemp:makelist(yi[i]*Li[i],i,1,n+1),
	FList:append([[discrete,xi,yi]],[L],FListTemp),
	DiscreteStyle:[style,[points,2,1,1]],
	FonctionStyle:makelist([lines,2,i],i,2,n+3),
	StyleList:append(DiscreteStyle,FonctionStyle),
	LegendList:append([legend,"Donnees d'interpolation","L(x)"],makelist(string(sconcat("y",i,".L",i,"(x)")),i,1,n+1)),



	
	xmin:apply(min,xi),
	xmax:apply(max,xi),
	ymin:apply(min,yi),
	ymax:apply(max,yi),
	/*On élargi un peu les bornes pour l'affichage*/
	k: 0.2*(xmax-xmin),
	xmax:xmax+k/2,
	xmin:xmin-k/2,
	k: 0.2*(ymax-ymin),
	ymax:ymax+k/2,
	ymin:ymin-k/2,
	
	plot2d(FList,[x,xmin,xmax],[y,ymin,ymax],StyleList,LegendList),
	kill(FListTemp,xmin,xmax,ymin,ymax),
	F_L(x)
);




